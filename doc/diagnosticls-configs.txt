INTRODUCTION                                       *diagnosticls-configs* *dls*

A collection of linters and formatters configured for diagnostic language
server to work with nvim-lsp.

SETUP                                              *diagnosticls-configs-setup*

First you need to initialize the plugin, this is where you can pass your own
LSP options:

>
    local function on_attach(client)
      print('Attached to ' .. client.name)
    end

    local dlsconfig = require 'diagnosticls-configs'

    dlsconfig.init {
      on_attach = on_attach -- Your custom attach function
    }
<

Finally, setup the linters/formatters according to the filetype, here is an
example for running eslint and prettier for `javascript` and `javascriptreact`
filetype:

>
    local eslint = require 'diagnosticls-configs.linters.eslint'
    local prettier = require 'diagnosticls-configs.formatters.prettier'
    dlsconfig.setup {
      ['javascript'] = {
        linter = eslint,
        formatter = prettier
      },
      ['javascriptreact'] = {
        linter = eslint,
        formatter = prettier
      }
    }
<

DEFAULT CONFIGURATIONS                          *diagnosticls-configs-defaults*

A default configuration for the supported filetypes is provided but not
activated by default.

To activate the default configuration you can pass the `default_config` flag as
true in the init function:

>
    dlsconfig.init {
      -- apply default config for supported linters and formatters
      default_config = true,
      -- default to true, use false if you don't want to setup formatters by default
      format = true
    }
<

You will still need to call the `setup()` after `init()` for the changes to
take effect. You can still pass your custom configurations to `setup()` as
show in |diagnosticls-confis-setup| and it will override any default
configuration set by `default_config` if it's for the same filetype.

NOTE: For `format` option it does not imply that it will "format on save". You
still need to setup that in your lsp on_attach handler.

ADVANCED CONFIGURATIONS                         *diagnosticls-configs-advanced*

If default configurations of a linter/formatter do not work for your
use-case, or there are additional configuration that needs to be added
which is not provided by default. Then you can extend the built-in
configurations with your own modifications. The API is the same as
diagnostic-languageserver Initialization Options on linter/formatter
structure. You can use |vim.tbl_extend| to extend these tables:

>
    local eslint = require 'diagnosticls-configs.linter.eslint'

    -- ESLint Extented Config
    eslint = vim.tbl_extend('force', eslint, {

      -- REQUIRED: if `default_config` is enabled, separate name from original sourceName
      sourceName = 'eslint_extended',

      args = { 'extra', 'args' },
      rootPatterns = { '.git' }
    })

    dlsconfig.setup {
      javascript = {
        linter = eslint
      }
    }
<

NOTE: If you have [`default_config` enabled](#default-configuration), then
`sourceName` needs to be a different name to the provided name, you can just
add "_extended" or any other unique name to the extended configuration will
work. This is because other defaults might use the same linter of the same
`sourceName` and would default to use that instead of your own extended
configuration.

TROUBLESHOOTING                                   *diagnosticls-configs-issues*

If you get "no executable found" issues in `:checkhealth`, this means that the
linter or formatter was not found in the provided filepath. Ensure that it is
installed globally or in a valid filepath.

For nodejs/npm, php/composer, ruby/bundler: check if the linter/formatter
is installed in your node_modules (npm), vendor (composer/bundler) project
folder, or installed globally.

SUPPORTED LINTERS AND FORMATTERS               *diagnosticls-configs-supported*

Check out the repo readme for supported linters and formatters:

https://github.com/creativenull/diagnosticls-configs-nvim#supported-linters-and-formatters

 vim:tw=78:ts=8:noet:ft=help:norl:
